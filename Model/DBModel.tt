<#@template debug="true" hostspecific="True" language="C#" #>
<#@output extension=".cs" #>
<#@import namespace="System.IO"#>
<#@include file="Manager.ttinclude"#>
<#@include file="DBTpl.ttinclude"#>
<# 
var manager = Manager.Create(Host, GenerationEnvironment); 
var dbTpl=new DBTpl(Host.ResolvePath(@"app.config"),"dianna");
#>
<# manager.StartHeader(); #>
/*
<auto-generated>
 此代码由T4模板自动生成
 生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #> by Auto Generated
*/
namespace Model
{
<# manager.EndBlock(); #>
     using System.Collections;
     using System.Collections.Generic;
     using System.Runtime.CompilerServices;
     public partial class DBModel<T>{
         /// <summary>
         /// 属性改变列表
         /// </summary>
         public Dictionary<string, object> PropertyChangedDic = new Dictionary<string, object>();
         /// <summary>
         /// 属性改变通知
         /// </summary>
         /// <param name="propertyValue"></param>
         /// <param name="propertyName"></param>
         protected void SetWithNotify<T>(T propertyValue,ref T field,[CallerMemberName]string propertyName = "")
         {
             if (!StructuralComparisons.StructuralEqualityComparer.Equals(field, propertyValue))
             {
			     field = propertyValue;
                 PropertyChangedDic.Add(propertyName, propertyValue);
             }
         }      
     }
<# 
var tables=dbTpl.GetTables();
foreach (var table in tables)
{
	var modelName=dbTpl.UpperFirst(table.TABLE_NAME);
	manager.StartNewFile(modelName+".cs"); #>
	using System;

    /// <summary>
    /// <#=table.TABLE_COMMENT#>
    /// </summary>
	public partial class <#=modelName#> :DBModel<<#=modelName#>>
	{ 
<# 	  var columns=dbTpl.GetColumns(table.TABLE_NAME);
	  foreach (dynamic column in columns)
	  { 
	   var columnType=dbTpl.GetColumnsType(column.Type,column.Null);
	   var field="_"+column.Field.ToLower();
#>     
       /// <summary>
	   /// <#=column.Comment#>
	   /// </summary>
       private <#=columnType#> <#=field#>;
	   /// <summary>
	   /// <#=column.Comment#>
	   /// </summary>
	   public <#=columnType#> <#=column.Field#> 
	   { 
	      get { return <#=field#>; }
          set { SetWithNotify(value, ref <#=field#>); }	   
	   }			  
<#
	  }
#>		
	}
<# manager.EndBlock(); 
}
#>
<# manager.StartFooter(); #>

}
<# 
manager.EndBlock();
manager.Process(true); 
#>
